Given a linked list, determine if it has a cycle in it.

Follow up:
Can you solve it without using extra space?

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        
        if (head == null) return false;
        ListNode fast = head;
        ListNode slow = head;
        int count = 0;
        boolean cycleFound = false;
        while (true){
            fast = fast.next;
            if (fast == null) break;
            count++;
            if (count %2 == 0) slow = slow.next;
            if (fast == slow) {
                cycleFound = true;
                break;
            }
        }
        return cycleFound;
    }
}