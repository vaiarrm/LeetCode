Given a binary tree, return the preorder traversal of its nodes' values.

//Recursive solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List <Integer> retList = new ArrayList<>();
        pOT(root,retList);
        return retList;
    }
    private void pOT(TreeNode node, List<Integer> retList){
        if (node == null) return;
        retList.add(node.val);
        pOT(node.left,retList);
        pOT(node.right,retList);
    }
}

/* Iterative Solution

public class Solution {//  the key idea is stack is first in last out. so need push right node first.
List<Integer> res= new ArrayList<Integer>();
public List<Integer> preorderTraversal(TreeNode root) {
    Stack<TreeNode> stack = new Stack<TreeNode>();
    if(root==null)
        return res;
    stack.push(root);
    TreeNode temp;
    while(!stack.empty()){
        temp=stack.pop();
        res.add(temp.val);
        if(temp.right!=null)
            stack.push(temp.right);
        if(temp.left!=null)
            stack.push(temp.left);
    } 

    return res;
}

*/