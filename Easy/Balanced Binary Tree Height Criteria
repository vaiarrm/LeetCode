Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        return isB(root) == -1?false:true;
    }
    
    private int isB(TreeNode node){
        if (node == null) return 0;
        int heightL = isB(node.left);
        int heightR = isB(node.right);
        
        if (heightL == -1 || heightR == -1 || Math.abs(heightL - heightR) > 1){
            return -1;
        }
        return heightL > heightR?heightL+1:heightR+1;
    }
}